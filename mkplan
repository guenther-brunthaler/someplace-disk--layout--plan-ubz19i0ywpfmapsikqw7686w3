#! /bin/sh
exit_version() {
	cat << .; exit
$0 Version 2021.314.1

Copyright (c) 2017-2021 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
.
}

exit_help() {
	cat << .; echo; exit_version # 66 columns line width.
$0 - evaluate a disk allocation layout sector plan

Usage: $0 [ <options> ] < <plan_source_file>

<plan_source_file> is a text file containing one plan instruction
per line.

Without options, evaluates the plan read from standard input and
displays the resulting sector (512-byte unit) ranges.

Options:
-v: Additionally show start, stop and size in units of bytes
-s: Show Bourne shell code to set variables for every range
-h: Display this help and exit
-V: Display version information and exit

Plan instructions:

"align <bytes>":

Change the current alignment value. This value is initially
undefined. Whether or not alignment correction is used, the
effective start and stop offsets of every range must be a
multiple of 512 bytes.

"!<label>":

Save the current byte offset as a label with name <label>. Once
defined, a label cannot be redefined and any attempts to do so
will have no effect. The initial byte offset is 0. Labels live in
a different namespace than ranges, and so a label and a range of
the same name may exist independently.

"?<label>":

Restore the current byte offset from previously saved label with
name <label>. Alignment correction will not take place as part of
this operation.

"<bytes> <range_name>":

Start a new range at the current byte offset (do not try to
correct its alignment). Then add <bytes> (or the contents of a
label) to the current offset and apply alignment correction to
the result. A zero value is allowed for adding. Then use the new
current byte offset as the stop position (first byte beyond the
end) of the range.

Alignment correction requires a previously defined alignment
value. Correction is necessary only if the current byte position
is not a multiple of the alignment value. In this case, 1 is
added to the current byte position until it becomes a multiple of
the alignment value.

There is deliberately no way to subtract from the current
position as this would become too complicated. Use the -s option
instead to create a snippet for setting shell variables and then
use "expr" or arithmetic shell expansion to perform any required
subtractions. Make sure to verify at run-time that the arithmetic
actually used can keep up with the largest of the resulting
sector numbers.

"@<bytes> <range_name>":

Start a new range at the current byte offset (do not try to
correct its alignment). Then set <bytes> as the new current
offset and apply alignment correction to the result. Then use the
new current byte offset as the stop position (first byte beyond
the end) of the range.

"=<bytes> <range_name>":
"=@<bytes> <range_name>":

Same as without the "=", except that the alignment correction of
the range stop position is skipped.

"stop":

Stop processing the plan file at this point and ignore any
remaining lines of text.

How to specify <bytes>:

<bytes> is either a byte value, optionally followed immediately
by a decimal multiplier (kB, MB, GB, TB, PB or EB) or by a binary
multiplier (KiB, MiB, GiB, TiB, PiB or EiB) or by an explicit
multiplier in the form "*<integer>, such as "*512". Or, if it has
the form "?<label>", the contents of a previously set label with
name <label> will be used as the value instead.
.
}

set -e
trap 'test $? = 0 || echo "$0 failed!" >& 2' 0
verbose=false
shvars=false
while getopts vshV opt
do
	case $opt in
		v) verbose=true;;
		s) shvars=true;;
		h) exit_help;;
		V) exit_version;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`
# Assign supported predefined unit multipliers to shell variables.
pdu=kB; eval $pdu=1000; pbu=KiB; eval $pbu=1024; ss=512
for mu in M G T P E
do
	eval ${mu}B=\`expr \$$pdu \\\* $kB\`; pdu=${mu}B
	eval ${mu}iB=\`expr \$$pbu \\\* $KiB\`; pbu=${mu}iB
done
bs=none # Alignment value.
start=0 # Current offset.
# Assign the value associated with label named $2 to shell variable with name
# $2. $3 and onwards are pairs ($label_name, $byte_offset) to be searched. $2
# may have an optional "?"-prefix which will be stripped. Only the first
# matching label from list will be used.
get() {
	local name what
	name=$1; what=${2#"?"}; shift 2
	while test $# != 0
	do
		if test "$1" = "$what"
		then
			eval "$name=\$2"
			return
		fi
		shift 2
	done
	echo "Undefined label '$what'!" >& 2
	false || exit
}
set -- # Positional arguments hold ($label_name, $byte_offset)-pairs.
while read -r line desc
do
	# Loop invariant: $start is a sector-aligned offset.
	case $line in
		stop) break;;
		!*) set -- "$@" "${line#!}" "$start"; continue;;
		"?"*) get start "$line" "$@"; continue;;
		align) line=$desc; bs=get
	esac
	# Set alignment value or "get" (if evaluating $line yields alignment).
	align=$bs
	case $line in
		=*) line=${line#?}; align=1
	esac
	# Prepare to calculate the end offset $off of a new range with
	# name $desc from expression $line. (The start offset of
	# the range will be $start.)
	case $line in
		@*)
			line=${line#?}
			case $line in
				"?"*) get line "$line" "$@"
			esac
			off=0
			;;
		*) off=$start
	esac
	# $line is the length of the range, a byte value,
	# possibly suffixed with a unit multiplier.
	case $line in
		*[kMGTPE]B) t=${line%??}; eval mu=\$${line#"$t"}; line=$t;;
		*[KMGTPE]iB) t=${line%???}; eval mu=\$${line#"$t"}; line=$t;;
		*"*"[1-9]*)
			mu=`expr x"$line" : x'[0-9]*\\*\\([1-9][0-9]*\\)$'`
			line=${line%"*$mu"}
			;;
		*) mu=1
	esac
	# Now $line is an integer and $mu its associated unit multiplier.
	case $bs in
		get)
			bs=`expr $line \* $mu || :`
			continue
	esac
	# Calculate $line as end of range starting at $off with $line bytes.
	line=`expr $line \* $mu + $off || :`
	# Round up the end of the range using the current alignment value.
	line=`expr \( $line + $align - 1 \) / $align || :`
	line=`expr $line \* $align || :`
	# Convert the new end offset $line from bytes into sectors.
	s=`expr $line / $ss || :`
	ns=`expr $s \* $ss || :`
	# Ensure the range end offset is sector aligned. (Because
	# of the loop invariant, we don't also need to check $start.)
	test "$ns" = "$line"
	# Set $sb to first sector of range. Set $sn to range length as sectors.
	sb=`expr $start / $ss || :`
	sn=`expr \( $ns - $start \) / $ss || :`
	# Emit results as a new range.
	if $shvars
	then
		printf %s%s%s \
			"$sb $sn ${desc}_start=$sb" \
			"; ${desc}_stop=`expr $sb + $sn || :`" \
			"; ${desc}_count=$sn"
	else
		printf %s "$sb $sn $desc"
	fi
	if $verbose
	then
		$shvars && printf ' #'
		printf %s%s \
			" (`expr $ns - $start || :` bytes @ $start" \
			" through `expr $ns - 1 || :`)"
	fi
	echo
	# The current range's end offset becomes the next range's start offset.
	start=$ns
done | LC_NUMERIC=C sort -n \
| if $shvars
then
	while IFS=' ' read -r line line line # Get rid of sort helper fields.
	do
		printf '%s\n' "$line"
	done
else
	cat # Display only sort helper fields (start sector and sector count).
fi
