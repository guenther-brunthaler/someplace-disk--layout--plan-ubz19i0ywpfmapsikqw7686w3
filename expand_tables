#! /bin/sh
# Version 2019.194.1
# Copyright (c) 2019 Guenther Brunthaler. All rights reserved.
#
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.
template_file=tables_tpl.txt
planner=mkplan
plan_file=plan.txt
keys_dir=keys

set -e
close_table() {
	test -z "$table" && return
	table=
	exec 5>& -
}
cleanup() {
	rc=$?
	close_table
	test -n "$TF" && rm -- "$TF"
	test $rc = 0 || echo "$0 failed!" >& 2
}
TF=
table=
trap cleanup 0
trap 'exit $?' TERM HUP INT QUIT

mount=false
shkeys=false
unmount=false
table_syntax=false
while getopts ukmtf:p:K:P: opt
do
	case $opt in
		P) planner=$OPTARG;;
		p) plan_file=$OPTARG;;
		K) keys_dir=$OPTARG;;
		f) template_file=$OPTARG;;
		t) table_syntax=true;;
		m) mount=true;;
		k) shkeys=true;;
		u) unmount=true;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

test -f "$template_file"

if $mount
then
	$shkeys || $table_syntax && { false || exit; }
	shkeys=true
fi

TF=`mktemp -- "${TMPDIR:-/tmp}/${0##*/}.XXXXXXXXXX"`

if $unmount
then
	sed 's/:$//; t; d' "$template_file" | tac > "$TF"
	while IFS= read -r m
	do
		if dmsetup table -- "$m" > /dev/null 2>& 1
		then
			echo "Removing mapping $m"
			dmsetup remove -- "$m"
		fi
	done < "$TF"
	exit
fi

test -d "$keys_dir"

test -f "$planner"
test -f "$plan_file"
sh "$planner" -s < "$plan_file" > "$TF"
. "$TF"

process_table() {
	test -z "$table" && return
	local map
	map=$table
	close_table
	if $mount
	then
		dmsetup create -- "$map" < "$TF"
		local mf try
		mf=/dev/mapper/$map
		if test ! -e "$mf"
		then
			dmsetup mknodes -- "$map"
			try=1
			while test ! -e "$mf"
			do
				sleep 1
				try=`expr $try + 1`
				test $try != 5
			done
		fi
	else
		if $table_syntax
		then
			local line
			while IFS= read -r line
			do
				echo "$map: $line"
			done
		else
			cat
		fi < "$TF"
		if $table_syntax
		then
			:
		else
			echo
		fi
	fi
}

# "Protected" subtraction which will not fail when the result is zero. For use
# in $template_file.
sbtr() {
	expr "$1" - "$2" || :
}
cb='}}'
while IFS= read -r line
do
	test -z "$line" && continue
	case $line in
		*:)
			line=${line%:}
			kfile=$keys_dir/$line.key
			process_table
			exec 5> "$TF"; table=$line
			if $table_syntax
			then
				:
			else
				echo "Creating mapping $table:"
			fi
			continue
	esac
	test -n "$table"
	set -f; eval "line=\"$line\""; set +f
	pfx=${line%"{{"*};
	if test "$pfx" != "$line"
	then
		line=${line#"$pfx"}
		sfx=${line#*"$cb"}; test "$sfx" != "$line"
		line=${line%"$sfx"}; line=${line%"$cb"}; line=${line#"{{"}
		expr x"$line" : x'[1-9][0-9]*$' > /dev/null
		test -f "$kfile"
		test "`stat -Lc %s -- "$kfile"`" -ge $line
		printf %s "$pfx"
		od -A n -vt x1 -N $line -- "$kfile" \
		| if $shkeys
		then
			cat
		elif $table_syntax
		then
			tr '[:xdigit:]' '0'
		else
			tr '[:xdigit:]' '?'
		fi \
		| tr -dc '?[:xdigit:]'
		printf '%s\n' "$sfx"
	else
		echo "$line"
	fi >& 5
done < "$template_file"
process_table
